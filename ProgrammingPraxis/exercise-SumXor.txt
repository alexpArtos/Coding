Problem Statement:

Assume there are two positive integers a and b that have sum s and XOR x. Given an s on the range [2, 10^12] and x on the range [0, 10^12], find a list of possible values of the ordered pairs (a, b). For instance, given s = 9 and x = 5, there are four possible pairs: (2, 7), (7, 2), (3, 6) and (6, 3).

Analysis:

The simplest way to solve this would be to iterate over all possible numbers a in the given range (from 0 to 10^11), compute b = a XOR x (a X x for short) and then check if their sum would match s. This is clearly inefficient. Below I present a faster solution.

I'll let |m| be the length of a number m, that is, the number of digits in m. Because a and b are so closely related, the number of possible sums is reduced. In fact, there is a particular structure in the sums and pairs possible for each x. If n = |s|, we can have up to 2^n different pairs whose sum is s. However, when we consider the restriction a X b = x, we find that the number of pairs is greatly reduced, and moreover that each possible sum has exactly the same number of pairs generating it. This is because each 0 bit in the XOR mask forces the numbers a and b to have a fixed bit in that position.

Lemma: Fix a xor mask x with length n. Let k be the number of 0s in x. For a given sum s, there are exactly 2^(n-k) pairs (a,b) such that a X b = x and a + b = s. Consequently, there are 2^k different possible sums.

Proof: 
If x = 0, all pairs are of the form (a, a) and so their sum is 2a. Therefore, there is only one pair satisfying this sum, and there are 2^n distinct sums.

For the general case, denote the number s by sn-1 ... s0, where each si is a binary digit of the number. Let s0 be the least significant bit. Assume analogous representations for a, b and x. Also, let ci denote the carry that is added in column i, resulting from an overflow in column i-1. cj = 0 for every j <= 0.

For each column i, we have si = ai + bi + ci = xi + ci, and so we can determine the carry of every column from just the sum and the xor mask.
If xi = 0, then either both ai, bi are 0 or both are 1. In the first case, the carry for the next column is 0, and in the latter it is 1. But since this carry is determined by the sum and the xor mask, this actually determines the value of ai,bi.

Conversely, if xi = 1, then (ai,bi) can be (0,1) or (1,0), and since both satisfy the expression for si above, we have two distinct possibilities for this position.

This shows then that when x has k 0s, all possible values for a (or b) have k fixed positions, and therefore n-k free ones. This means there are 2^(n-k) different pairs that satisfy s and x. Finally, because there 2^n possible pairs in total, there are exactly 2^n / (2^(n-k)) = 2^k different sums.
[End of proof]

This gives a simple scheme to solve this problem:
- obtain the base form of a, with the fixed bits as determined by s and x, and 0 in all other positions
- iterate over all the possibilities for the free positions.

An easy way to do the second part is to store a in a list. Then, iterate over all the free positions, each time doing this:
	- for each number in the list, add a copy of this number with a single change: set the current free position to 1.
	Example: if n = 4, the base a is 1__0_ with two free positions 0, 2 and 3, we have these values in the list successively:
		1. 16
		2. 16, 17
		3. 16, 17, 20, 21
		4. 16, 17, 20, 21, 24, 25, 28, 29
	Although this is time efficient, memory requirements are large and the program may not terminate due to memory exhaustion.
	
An alternative is to iterate from 1 to 2^(n-k)-1 and generate each successive pair on the fly, from a and the iteration index, say j. If we have a list with the indices of the free positions (fp), we can do this by computing a + sum_i fp[i] * j[i], where i goes from 1 to |fp| (that is, the number of free positions) and j[i] represents the ith bit of j.

A possible optimization is to compute each new number from the previous one, instead of a. If we don't have to present the pairs in ascending order, then we can make use of Gray codes, where the the difference between consecutive numbers is always one bit only. In this way, we only have to toggle one single position.
A fast way to compute the nth Gray Code word is n X n >> 1, and to obtain the changing position we simply XOR the two successive codewords. This gives 2^j instead of j, where j is the position of the change, so I use a dictionary to turn this immediately into the weight of the corresponding free position.

