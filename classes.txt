CRepository:
	Properties: name, location, description
	Methods: addFile, writeTo, analyse
	Static Methods: descriptionPattern
	
	Notas: o objectivo desta classe, para ja, e' o de escrever um ficheiro de repositorio para o disco. Quando o repositorio e' criado, os ficheiros no disco sao lidos e registados em memoria. Depois disso, o repositorio eventualmente e' escrito para o disco.
	
	Mas quando abrimos a aplicacao e o repositorio ja existe, o processo inverso (ler do disco para a memoria) nao e' imediatamente realizado. Isto so e' feito na altura de realizar uma analise.
	E' perfeitamente consistente e natural incluir entao a funcao readFrom, e provavelmente modificar o nome de ambas as funcoes para WriteToFile, ReadFromFile.
	

CRepositoryItem:
	Properties: location, locationRelative, hash, size, time	
	Static Methods: linePattern, getDataFile
	
	Notas: representa cada elemento de um repositorio guardado em memoria
	
CRepositoryManager: 
	Data structures: 
		repoDict : location --> repo
		repoToItemDict : repo --> QStandardItem
		repoHashDict: hash --> list of repository items
		widget 
	Methods: 
		<--- management of repositories persistence --->
		loadRepositories, saveRepositories [manages the list of repositories kept in a file]
		loadRepoFile: provavelmente para mudar para CRepository, renomeando para LoadFromFile
		
		<--- main UI operations --->
		removeRepo, createRepo, repairRepo, createRepoAt

		<--- internal structures --->
		registerItem: stores a CRepositoryItem in a dictionary according to its hash. The hash is a key into a list of repoItems
		
		<--- management of view model, for graphical presentation of repositories --->
		setModel: this is for graphical purposes
		addRepoToModel: create a QStandardItem from a given repoItem
		renameRepoInModel, removeRepoFromModelByIndex: 
		
		
		<--- utility functions --->
		getRepoByLocation, defaultLocation, defaultIndex, repoExtension
		
	Static Methods: descriptionPattern
	
	Notas: classe complexa. E' provavel que esteja a acumular funcionalidade que devia estar em classes diferentes. Parece-me ter estas funcoes:
		- controlar a persistencia da lista de repositorios, gravando para o disco e lendo do disco
		- controlar a apresentacao no UI dos repositorios existentes, atraves do ViewModel do widget respectivo
		- automatizar as operacoes do UI de gestao de repositorios. Isto inclui tanto o modelo-vista como interaccoes com o disco.
		

		
	
	Tem conhecimento do widget que apresenta a lista de repositorios, assim como tem um dicionarioa que mapeia um repositorio para um QStandardItem (para apresentar nessa lista). 
	
