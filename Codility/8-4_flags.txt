Name: Flags
Level: Hard
Chapter: 8
Complexity: O(n)
https://codility.com/programmers/task/flags/

using System;
// you can also use other imports, for example:
// using System.Collections.Generic;

// you can use Console.WriteLine for debugging purposes, e.g.
// Console.WriteLine("this is a debug message");

class Solution {
    public int solution(int[] A) {
        // write your code in C# 5.0 with .NET 4.5 (Mono)
        int n = A.Length;
        int[] peaks = new int[n];
        int npeaks = 0;
        int[] dist = new int[n];
        int minDist = -1;        
        
        // identify peaks
        for (int i = 1; i < n-1; i++) {
            if ( (A[i] > A[i-1]) && (A[i] > A[i+1]) ) {
                peaks[npeaks] = i;
                if (npeaks >= 1) {
                    int this_dist = i - peaks[npeaks-1];
                    if (minDist == -1) {
                        minDist = this_dist;   
                    } else {
                        minDist = Math.Min(minDist, this_dist);   
                    }
                    dist[npeaks] = (peaks[npeaks] - peaks[0]);  
                }
                npeaks++;
            }
        }
        
        // basic checks for the max number of flags
        int minFlags;
        if (minDist > -1) {
            minFlags = Math.Min(npeaks, minDist);
        } else {
            return npeaks; // at most one peak, this is the number of flags we can place   
        }
        // ensured npeaks > 1
        
        int maxFlags = npeaks; // this is temporary there are more checks below
        int nFlags = minFlags+1; // nFlags - 1 holds the last good number of flags
        
        while ( (nFlags <= maxFlags) ) {

            if (dist[npeaks-1] < nFlags * (nFlags - 1)) {
                // not enough distance in total to accomodate x-1 intervals between flags
                // of size at least x
                return nFlags - 1;   
            }

            int peak_pos = 1; // we start on the second peak
            int flags = 1; // we already have the flag at the first peak
            int cur_dist = 0;
            
            while ( (flags < nFlags) && (peak_pos <= npeaks) ) {
                if (dist[peak_pos] - cur_dist >= nFlags) {
                    flags++;
                    cur_dist = dist[peak_pos];
                }
                peak_pos++;
            }
            if (flags < nFlags) { // tried all the peaks and could not achieve the total of flags
                return nFlags-1; //return last good number
            } else {
                nFlags++; // try the next number of flags
            }
        }
        return maxFlags;
    }
}