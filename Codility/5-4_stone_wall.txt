Name: StoneWall
Level: Easy
Chapter: 5
Complexity: O(n)


using System;
// you can also use other imports, for example:
using System.Collections.Generic;

// you can use Console.WriteLine for debugging purposes, e.g.
// Console.WriteLine("this is a debug message");

class Solution {
    public int solution(int[] H) {
        // write your code in C# 5.0 with .NET 4.5 (Mono)
        int n = H.Length;
        Stack<int> s = new Stack<int>();
        int count = 0;
                
        for (int i = 0; i < n; i++) {
            int h = H[i];
            if (s.Count == 0) {
                s.Push(h);
                continue;
            } 
            int val = s.Peek();
            if (val == h) {
                // this adds to the current cuboid so don't do anything   
            }
            if (h > val) {
                // the previous cuboid persists but we are going to create a new one
                // add this i to the pile
                s.Push(h);
            }
            if (h < val) {
                while (h < val) {
                    // we need a new cuboid, so we have to close all non-usable cuboids
                    s.Pop();
                    count++;
                    
                    if (s.Count > 0) {
                        val = s.Peek();         
                    } else {
                        val = 0;
                        break;  
                    }
                }
                // either the stack is empty and we have accounted for all cuboids
                // or we have a base we can use
                // if h is equal to val, we reuse the same cube
                // otherwise, we start a new cuboid
                if (h > val) {
                    s.Push(h);            
                }
                
            }
        }
        count += s.Count;
        return count;
    }
}